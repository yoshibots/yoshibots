=========
Pacemaker
=========

# 事前知識

$ pcsd -> クラスタ管理ツール
$ Pacemaker（Ver1.1.23）- リソース制御機能
$ corosync(Ver2.4.5) - クラスタ制御機能
$ RA(リソースエージェント)はシェルスクリプトで作成されており、OCF(Open Cluster Framework)という仕様に従えば、独自のものを作成し使用することができる

# 事前準備

DNS  # 必要に応じで/etc/hostsなどに名前解決できるようにしておく
systemd     # Clusterリソースで制御する為自動起動をdisabledに設定しておく

Firewall

.. code-block::

   firewall-cmd --list-all  # 確認
   firewall-cmd --add-service=high-availability --permanent  # デフォルトポートの場合
   firewall-cmd --add-port=<XXX>/tcp --permanent             # ポートを変更する場合
   firewall-cmd --reload

# 構築手順
------------

.. code-block::

   # 全ノードで実施
   yum install -y  pacemaker pcs

.. note::

  | CentOS7でPacemakerを使用する際は下記をインストールすること
  | https://linux-ha.osdn.jp/wp/archives/4798

  | yum install -y NetworkManager-config-server
  | systemctl restart NetworkManager


  # 自動起動の設定及び起動（全ノード）
  > systemctl enable --now pcsd

.. code-block::

   # 全ノードで実施
   passwd hacluster # hacluster Userのパスワードを設定

# クラスタの基本設定
各ノード間で認証を確立（いづれか１つのノードで実施）

.. code-block::

   #/etc/hostsに記載、またはDNSにて名前解決できる場合はHostnameでOK
   pcs cluster auth <Node1IP|Hostname> <Node2IP|Hostname> 

   Username: # hacluster
   Password: # haclusterに指定したパスワード

 .. code-block::

   pcs cluster setup --name <ha_cluster> <NODE1IP> <NODE2|IP>

# リソースの設定

# VIPの作成

.. code-block::

   pcs resource create VIP ocf:heartbeat:IPaddr2  ip=<VIPとして使用したいIP> cidr_netmask=24 op monitor interval=10s # VIPの名前で作成

   # Nginxのリソース設定
   pcs resource create webserver systemd:nginx op monitor timeout="5s" interval="5s"

 # 制約の追加

.. code-block::

   pcs constraint colocation add <webserver> <VIP(floating_ip)> INFINITY # 
   pcs constraint order <VIP(floating_ip)> then webserver  # 順序の設定

   # webserverのFail Countを4分でリセット
   pcs resource meta webserver failure-timeout=240s # リソースをwebserverで作成した場合
   pcs resource defaults migration-threshold="1"     # 何回の失敗でリソースを切り替えるか
   pcs property set cluster-recheck-interval=<Xmin>  # クラスタのチェック間隔

   # STONITHの無効化
   pcs property set stonith-enabled=false
   # 確認（何も表示されなければOK）
   crm_verify -L -V


## ノード追加手順

!) 追加するHostを/etc/hostsやDNSサーバに双方向登録しておく

.. code-block::

   pcs cluster node add <node>     #node追加
   pcs cluster node remove <node>  #node削除

   pcs cluster auth <node_name(new)>  # nodeの認証

 # 既存のノードから コピー/etc/corosync/corosync.conf

## ノード追加手順 end

■ よく使用するコマンド

クラスターの操作

.. code-block::

   pcs status  # クラスタの状態の確認
   pcs config  # クラスターの全設定を表示

   pcs cluster status  #

 # Corosyncによるサーバ間通信状況を確認 # "status"が"active"かつ"no faults"であれば、問題なく通信が行えている。
 > corosync-cfgtool -s
 
# Cluster 起動 *全ノード?

.. code-block::
   
   pcs cluster start --all
   pcs cluster stop --all    # Cluster 停止
   pcs cluster start <NODE_NAME>    # node個別に起動する
   pcs cluster stop <NODE_NAME> --force    # node個別に停止
   pcs cluster destroy# Cluster設定の削除
   pcs cluster standby <node name> [--all] # 特定nodeをスタンバイに移行
 
 # リソースの操作-------------
 
 # 表示
 > pcs resource show  #リソース一覧を表示
 > pcs resource show --full  #すべてのリソースのパラメータを表示
 > pcs resource show "resource_id"  #指定リソースのパラメータを表示
 
 # 削除
 > pcs resource delete "resource_id"
 
 # Failcountのリセット(いずれか1つのnodeで実施)
 > pcs resource cleanup
 
 # リソースグループの移動(FO)
 > pcs resource move <rg01>
 # 元に戻す
 > pcs resource clear <rg01>
 
 
 # Create VIP
 > pcs resource create VIP ocf:heartbeat:IPaddr2 \
     ip=<192.168.XX.XX> cidr_netmask=24 op monitor interval=10s
     
     # Disabled STONITH
     > pcs property set stonith-enabled=false
     
     # 制約の操作----------------
     
     # 設定した制約の表示
     pcs constraint list show
     
     # リソースセットの作成
     > pcs constraint order set <a> <b> <c> # a,b,cという3つのリソースを順序付けされたひとつのリソースセットとして設定
     
# プロパティの操作
     
.. code-block::

  pcs property list
  pcs property set no-quorum-policy=ignore

PATH
# RAスクリプト -> /lib/ocf/resource.d/
     
     参考資料
     Pacemakerの概要（概要）
     https://linux-ha.osdn.jp/wp/manual/pacemaker_outline
     
     とほほのPacemaker入門（概要※ipv6は無効化しないこと）
     https://www.tohoho-web.com/ex/pacemaker.html
     
     How to Set Up Nginx High Availability Cluster using Pacemaker on CentOS 7(構築おススメ)
     https://www.rosehosting.com/blog/how-to-set-up-nginx-high-availability-cluster-using-pacemaker-on-centos-7/
     
     CENTOS7にPACEMAKERをインストールしてみる（構築時に参照）
     https://sky-joker.tech/2017/03/26/centos7%E3%81%ABpacemaker%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/
     
     Pacemaker/Corosync の設定値について
     https://www.sraoss.co.jp/tech-blog/pacemaker/pacemaker-config-values/
     
     【RHEL 7】High Availability アドオンのリソースの設定
     https://nwengblog.com/rhel-ha-resource/
     
     Pacemakerクラスタ管理コマンドまとめ
     https://kan3aa.hatenablog.com/entry/2015/11/14/194942
     
     
     Linuxで高可用性/クラスタリングを構成および維持する方法(構築)
     https://ja.linux-console.net/?p=120
     
     6.4. 制約の表示
     https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/6/html/configuring_the_red_hat_high_availability_add-on_with_pacemaker/s1-constraintlist-haar
     
     pacemaker Q&A
     https://www.web-dev-qa-db-ja.com/ja/pacemaker/
     
     4.4. Managing Nodes in a Corosync-Based Cluster
     https://clusterlabs.org/pacemaker/doc/deprecated/en-US/Pacemaker/1.1/html/Pacemaker_Explained/_managing_nodes_in_a_corosync_based_cluster.html
     
`インフラ構築手順書(PaceMaker+MySQLレプリケーション構築) <>`_
     http://infra.blog.shinobi.jp/Entry/29/
